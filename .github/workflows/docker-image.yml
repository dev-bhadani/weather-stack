name: Backend Tests (Weather and Widget Services)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  weather-tests:
    name: Run Weather Service Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend/weather-service

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: weather-service-coverage
          path: ./backend/weather-service/coverage

  widget-tests:
    name: Run Widget Service Tests with Weather Docker
    needs: weather-tests
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017

    env:
      MONGO_URL: mongodb://localhost:27017/widgets_test
      WEATHER_SERVICE_URL: http://localhost:4000/api

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build weather-service Docker container
        working-directory: ./backend/weather-service
        run: docker build -t weather-service .

      - name: Run weather-service container
        run: docker run -d --name weather-api -p 4000:4000 weather-service

      - name: Wait for weather-service to be ready
        run: |
          echo "Waiting for weather-service to respond..."
          for i in {1..10}; do
            curl -sSf http://localhost:4000/api/weather?location=Berlin && break
            echo "Retrying ($i)..."
            sleep 3
          done

      - name: Install widget-service dependencies
        working-directory: ./backend/widget-service
        run: npm ci

      - name: Run widget-service tests with coverage
        working-directory: ./backend/widget-service
        run: npm run test:coverage

      - name: Upload widget-service coverage
        uses: actions/upload-artifact@v4
        with:
          name: widget-service-coverage
          path: ./backend/widget-service/coverage

      - name: Cleanup Docker
        if: always()
        run: docker rm -f weather-api
